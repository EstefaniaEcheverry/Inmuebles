#Cargue las librerias necesarias
library(DT)
library(sf)
library(sp)
library(maps)
library(png)
library(tmap)
library(dplyr)
library(ggmap)
library(shiny)
library(tidyr)
library(ggtext)
library(plotly)
library(readxl)
#  library(colmaps)
library(ggplot2)
library(leaflet)
library(stringr)
library(ggthemes)
library(rsconnect)
library(tidyverse)
library(ggcorrplot)
library(rstudioapi)
library(tidygeocoder)
library(rgeoboundaries)
library(shinydashboard)
library(shinycssloaders)# to add a loader while graph is populating
#Crear el objeto de base de datos
datos <- read.csv2("data/datosinmu.csv", header= TRUE)
direccion_unique <- read.csv2("data/direccion_unique.csv", header= TRUE)
# Cambiar las variables a factores
datos$IdInmueble <- as.character(datos$IdInmueble)
datos$NoContrato <- as.character(datos$NoContrato)
datos$NoCCostos <- as.factor(datos$NoCCostos)
datos$NoSolicitud <- as.character(datos $NoSolicitud)
datos$CentroCostos <- as.factor(datos$CentroCostos)
datos$Ciudad <- as.factor(datos$Ciudad)
datos$Aseguradora <- as.factor(datos$Aseguradora)
datos <- datos %>%
rename(Latitud = localizaciones.lat)
datos <- datos %>%
rename(Longitud = localizaciones.long)
# Estructura de los datos
datos %>% str()
#  Choices for selectInput
c1 = datos %>% select(c(15:17))%>%
names()
c1
c2
#####################
c2 = datos %>% select(c(5,9:11)) %>%
names()
c2
#####################
################################################################
# Crear mapa con geoboundaries escogiendo solo los municipios
area_metropolitana <- geoboundaries(country = "COLOMBIA", adm_lvl = 2) %>%
filter(is.element(shapeName,c("MEDELLÃN", # para adm_lvl =2 los municipios
"BELLO",    # estan en mayuscula y no estan
"COPACABANA",# en UTF-8
"ENVIGADO",
"CALDAS", # hay dos caldas en colombia
"ITAGÃÅÃ", # itagui
"LA ESTRELLA",
"SABANETA",
"SAN JERÃâNIMO"
) )
) %>%
st_transform(crs = 3857)
area_metropolitana
plot(area_metropolitana)
area_metropolitana
# Cambiandoles los nombres por como se escribe
area_metropolitana$shapeName<-c("CALDAS_NO",# no son de antioquia
"ENVIGADO",
"ITAGÃÃ",
"CALDAS",
"SAN JERÃNIMO",
"MEDELLIN",
"COPACABANA",
"BELLO",
"SABANETA",
"LA ESTRELLA"
)
# Eliminar el Caldas que no es de Antioquia
area_metropolitana <- area_metropolitana[!(area_metropolitana$shapeName
== "CALDAS_NO"),]
# Cambiandoles los nombres por como se escribe
area_metropolitana$shapeName<-c("CALDAS_NO",# no son de antioquia
"ENVIGADO",
"ITAGÃÃ",
"CALDAS",
"SAN JERÃNIMO",
"MEDELLIN",
"COPACABANA",
"BELLO",
"SABANETA",
"LA ESTRELLA"
)
area_metropolitana
#####################
################################################################
# Crear mapa con geoboundaries escogiendo solo los municipios
area_metropolitana <- geoboundaries(country = "COLOMBIA", adm_lvl = 2) %>%
filter(is.element(shapeName,c("MEDELLÃN", # para adm_lvl =2 los municipios
"BELLO",    # estan en mayuscula y no estan
"COPACABANA",# en UTF-8
"ENVIGADO",
"CALDAS", # hay dos caldas en colombia
"ITAGÃœÃ", # itagui
"LA ESTRELLA",
"SABANETA",
"SAN JERÃ“NIMO"
) )
) %>%
st_transform(crs = 3857)
area_metropolitana
# Cambiandoles los nombres por como se escribe
area_metropolitana$shapeName<-c("CALDAS_NO",# no son de antioquia
"ENVIGADO",
"ITAGÜÍ",
"CALDAS",
"SAN JERÓNIMO",
"MEDELLIN",
"COPACABANA",
"BELLO",
"SABANETA",
"LA ESTRELLA"
)
# Eliminar el Caldas que no es de Antioquia
area_metropolitana <- area_metropolitana[!(area_metropolitana$shapeName
== "CALDAS_NO"),]
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
direcciones_sf
names(datos)
unique(datos$CentroCostos)
runApp()
runApp()
area_metropolitana
#####################
################################################################
# Crear mapa con geoboundaries escogiendo solo los municipios
area_metropolitana <- geoboundaries(country = "COLOMBIA", adm_lvl = 2) %>%
filter(is.element(shapeName,c("MEDELLÃN", # para adm_lvl =2 los municipios
"BELLO",    # estan en mayuscula y no estan
"COPACABANA",# en UTF-8
"ENVIGADO",
"CALDAS", # hay dos caldas en colombia
"ITAGÃœÃ", # itagui
"LA ESTRELLA",
"SABANETA",
"SAN JERÃ“NIMO"
) )
) %>%
st_transform(crs = 3857)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
#Cargue las librerias necesarias
library(DT)
library(sf)
library(sp)
library(maps)
library(png)
library(tmap)
library(dplyr)
library(ggmap)
library(shiny)
library(tidyr)
library(ggtext)
library(plotly)
library(readxl)
#  library(colmaps)
library(ggplot2)
library(leaflet)
library(stringr)
library(ggthemes)
library(rsconnect)
library(tidyverse)
library(ggcorrplot)
library(rstudioapi)
library(tidygeocoder)
library(rgeoboundaries)
library(shinydashboard)
library(shinycssloaders)#
#Crear el objeto de base de datos
datos <- read.csv2("data/datosinmu.csv", header= TRUE)
direccion_unique <- read.csv2("data/direccion_unique.csv", header= TRUE)
# Cambiar las variables a factores
datos$IdInmueble <- as.character(datos$IdInmueble)
datos$NoContrato <- as.character(datos$NoContrato)
datos$NoCCostos <- as.factor(datos$NoCCostos)
datos$NoSolicitud <- as.character(datos $NoSolicitud)
datos$CentroCostos <- as.factor(datos$CentroCostos)
datos$Ciudad <- as.factor(datos$Ciudad)
datos$Aseguradora <- as.factor(datos$Aseguradora)
datos <- datos %>%
rename(Latitud = localizaciones.lat)
datos <- datos %>%
rename(Longitud = localizaciones.long)
#  Choices for selectInput
c1 = datos %>% select(c(15:17))%>%
names()
#####################
c2 = datos %>% select(c(5,9:11)) %>%
names()
c3= unique(datos$CentroCostos)
#####################
################################################################
# Crear mapa con geoboundaries escogiendo solo los municipios
area_metropolitana <- geoboundaries(country = "COLOMBIA", adm_lvl = 2) %>%
filter(is.element(shapeName,c("MEDELLÃN", # para adm_lvl =2 los municipios
"BELLO",    # estan en mayuscula y no estan
"COPACABANA",# en UTF-8
"ENVIGADO",
"CALDAS", # hay dos caldas en colombia
"ITAGÃœÃ", # itagui
"LA ESTRELLA",
"SABANETA",
"SAN JERÃ“NIMO"
) )
) %>%
st_transform(crs = 3857)
# Cambiandoles los nombres por como se escribe
area_metropolitana$shapeName<-c("CALDAS_NO",# no son de antioquia
"ENVIGADO",
"ITAGÜÍ",
"CALDAS",
"SAN JERÓNIMO",
"MEDELLIN",
"COPACABANA",
"BELLO",
"SABANETA",
"LA ESTRELLA"
)
# Eliminar el Caldas que no es de Antioquia
area_metropolitana <- area_metropolitana[!(area_metropolitana$shapeName
== "CALDAS_NO"),]
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
direcciones_sf$Centro_de_Costos==c3[1]
runApp()
runApp()
runApp()
runApp()
runApp()
direcciones_sf
tmap_mode('view') %>%
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_dots(size = 0.05,col = "Centro_de_Costos")
?tm_shape
direcciones_sf
tmap_mode('view') %>%
tm_shape(shp = direcciones_sf,name=c('Total_de_apartamentos','shapeName' ))+ # coordenadas lat long
tm_dots(size = 0.05,col = "Centro_de_Costos")
?tm_dots
tmap_mode('view') %>%
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_rgb()%>%
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') %>%
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_rgb()+
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_rgb()+
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_rgb()
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_markers()
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
?tm_markers()
?tm_markers()
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
?tm_markers(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
?tm_markers(size = 0.05)
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
direccion_unique
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) #%>%
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
direcciones_sf
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
direcciones_sf
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
select(names(direccion_unique)) %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
direcciones_sf
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
names(direccion_unique)
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
select(names(direccion_unique)[8:10]) %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
names(direccion_unique)[8:10]
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
select(names(direccion_unique)[8:11]) %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05)
# Pasar los datos a formato sf tomando algunos datos de la base
direcciones_sf <- direccion_unique %>%
st_as_sf(coords = c('Longitud', 'Latitud')) %>%
st_set_crs(value = 4326) %>%
st_transform(crs = 3857) %>%
st_intersection(area_metropolitana)
tm_shape
?tm_shape
direcciones_sf
tmap_mode('view') +
tm_shape(shp = direcciones_sf,name="Valor.prom")+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos")
direcciones_sf
names(direcciones_sf)
direcciones_sf_filtro<-direcciones_sf[:,c('Centro_de_Costos')]
direcciones_sf_filtro<-direcciones_sf[,c('Centro_de_Costos')]
direcciones_sf[,c('Centro_de_Costos')]
runApp()
?tmap
?tm_dots
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos",shape=30)
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos",shape=19)
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos",shape=25)
?tm_dots
names(direcciones_sf)
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos",shape=25,id=c( "Direcciones_c" , "Nombre_del_Lugar","Total_de_apartamentos"))
?tm_dots
tmap_mode('view') +
tm_shape(shp = direcciones_sf)+ # coordenadas lat long
#tm_markers(size = 0.05,col = "Centro_de_Costos")
tm_dots(size = 0.05,col = "Centro_de_Costos",shape=25,popup.vars=c( "Direcciones_c" , "Nombre_del_Lugar","Total_de_apartamentos"))
runApp()
is.null(NULL)
runApp()
names(direccion_unique)
c4= names(direccion_unique)
c4=c4[-length(c4)-1:length(c4)]
c4
r
c4= names(direccion_unique)
c4=c4[-length(c4)-1:length(c4)]
c4
names(direccion_unique)
length(c4)-1:length(c4)
c4=c4[-(length(c4)-1:length(c4)) ]
c4
c4= names(direccion_unique)
(length(c4)-1:length(c4))
length(c4)
length(c4)
c4= names(direccion_unique)
n1<-length(c4)
c4=c4[-(n1-1:n1) ]
c4
c4= names(direccion_unique)
c4=c4[-c(n1-1:n1) ]
c4= names(direccion_unique)
n1<-length(c4)
c4=c4[-c(n1-1:n1) ]
c4
c4= names(direccion_unique)
n1<-length(c4)
c4=c4[c(1:n1-2) ]
c4= names(direccion_unique)
n1<-length(c4)
c4=c4[c(1:(n1-2) ) ]
c4
runApp()
runApp()
#Crear el objeto de base de datos
datos <- read.csv2("data/direccion_act.csv", header= TRUE)
direccion_unique <- read.csv2("data/direccion_unique.csv", header= TRUE)
direccion_unique_b <- read.csv2("data/inmuebles_bloq.csv", header= TRUE)
direccion_unique_b <- read.csv2("data/direccion_bloq.csv", header= TRUE)
shiny::runApp()
datos_b<-read.csv2("data/inmuebles_bloq.csv", header= TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
